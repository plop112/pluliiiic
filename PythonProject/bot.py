import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

TOKEN = ""  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—É–ª–µ—Ç–æ–∫
GIFT_POOLS = {
    "cheap": [
        ("–ù–∞–∫–ª–µ–π–∫–∞", 50),
        ("–ß–∞—à–∫–∞ –∫–æ—Ñ–µ", 30),
        ("–®–æ–∫–æ–ª–∞–¥–∫–∞", 20)
    ],
    "expensive": [
        ("iPhone 15 Pro", 5),
        ("MacBook Air", 10),
        ("–ù–∞—É—à–Ω–∏–∫–∏ AirPods", 20),
        ("–§—É—Ç–±–æ–ª–∫–∞", 65)
    ]
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
user_choices = {}


@dp.message(Command("start"))
async def start(message: Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üé∞ –í—ã–±—Ä–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É", callback_data="select_roulette")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–≤–æ—é —É–¥–∞—á—É!", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "select_roulette")
async def select_roulette(callback_query: CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí∞ –î–µ—à–µ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="roulette_cheap")],
        [types.InlineKeyboardButton(text="üíé –î–æ—Ä–æ–≥–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="roulette_expensive")]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä—É–ª–µ—Ç–∫—É:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("roulette_"))
async def set_roulette(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    choice = callback_query.data.split("_")[1]  # cheap –∏–ª–∏ expensive
    user_choices[user_id] = choice  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É", callback_data="spin")]
    ])

    await callback_query.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª {'üí∞ –î–µ—à–µ–≤—É—é' if choice == 'cheap' else 'üíé –î–æ—Ä–æ–≥—É—é'} —Ä—É–ª–µ—Ç–∫—É! –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å:",
        reply_markup=keyboard
    )


@dp.callback_query(lambda c: c.data == "spin")
async def spin_wheel(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_choices:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä—É–ª–µ—Ç–∫—É!", show_alert=True)
        return

    selected_pool = GIFT_POOLS[user_choices[user_id]]
    gift = random.choices([g[0] for g in selected_pool], weights=[g[1] for g in selected_pool])[0]

    await callback_query.message.edit_text(f"üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {gift}")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

